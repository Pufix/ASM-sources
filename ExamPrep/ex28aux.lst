     1                                  bits 32
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit
     6                                  import exit msvcrt.dll
     7                                  
     8                                  extern scanf
     9                                  import scanf msvcrt.dll
    10                                  
    11                                  extern printf
    12                                  import printf msvcrt.dll
    13                                  
    14                                  segment data use32 class=data
    15 00000000 00<rept>                    result times 1000 db 0
    16 000003E8 00000000                    n dd 0
    17 000003EC 00000000<rept>              array times 1000 dd 0
    18 0000138C 256400                      formatdec db "%d",0
    19 0000138F 00000000                    nr dd 0
    20 00001393 00                          sum db 0
    21                                  segment code use32 class=code
    22                                      
    23                                      start:
    24                                      
    25 00000000 68[E8030000]                push n
    26 00000005 68[8C130000]                push formatdec
    27 0000000A FF15[00000000]              call [scanf]
    28 00000010 83C408                      add esp,8
    29                                      
    30 00000013 8B0D[E8030000]              mov ecx,[n]
    31 00000019 BF[EC030000]                mov edi,array
    32                                      for1:
    33 0000001E 51                              push ecx
    34                                          
    35 0000001F 68[8F130000]                    push nr
    36 00000024 68[8C130000]                    push formatdec
    37 00000029 FF15[00000000]                  call [scanf]
    38 0000002F 83C408                          add esp,8
    39 00000032 A1[8F130000]                    mov eax,[nr]
    40 00000037 AB                              stosd
    41                                          
    42 00000038 59                              pop ecx
    43 00000039 E2E3                        loop for1
    44                                      
    45                                      
    46 0000003B 8B0D[E8030000]              mov ecx,[n]
    47 00000041 BE[EC030000]                mov esi,array
    48 00000046 BF[00000000]                mov edi,result
    49 0000004B 66BB0A00                    mov bx, 10
    50                                      for2:
    51 0000004F C605[93130000]00                mov [sum],byte 0
    52 00000056 AD                              lodsd
    53 00000057 50                              push eax
    54 00000058 6658                            pop ax
    55 0000005A 665A                            pop dx
    56                                          while1:
    57 0000005C 66BA0000                            mov dx,0
    58 00000060 6683F800                            cmp ax,0
    59 00000064 7424                                je afterwhile1
    60 00000066 66F7F3                              div bx
    61 00000069 80FA01                              cmp dl, 1
    62 0000006C 741A                                je odd
    63 0000006E 80FA03                              cmp dl, 3
    64 00000071 7415                                je odd
    65 00000073 80FA07                              cmp dl, 7
    66 00000076 7410                                je odd
    67 00000078 80FA05                              cmp dl, 5
    68 0000007B 740B                                je odd
    69 0000007D 80FA09                              cmp dl, 9
    70 00000080 7406                                je odd
    71 00000082 0015[93130000]                      add [sum],dl
    72                                              odd:
    73 00000088 EBD2                            jmp while1
    74                                          afterwhile1:
    75 0000008A A0[93130000]                    mov al,[sum]
    76 0000008F AA                              stosb
    77 00000090 E2BD                        loop for2
    78 00000092 6A00                        push dword 0
    79 00000094 FF15[00000000]              call [exit]
    80                                      
    81                                      
    82                                      
    83                                      
    84                                      
    85                                      
    86                                      
    87                                      
    88                                      
    89                                      
    90                                      
    91                                      
    92                                      
    93                                      
    94                                      
    95                                      
    96                                      
    97                                      
    98                                      
    99                                      
   100                                      
   101                                      
   102                                      
   103                                      
   104                                      
   105                                      
